class Solution {
public:
    int bs1(const vector<int>&a,int l,int r,int target)
    {
        int n = a.size();
        while(l<=r)
        {
            int mid = l+(r-l)/2;
            if(a[mid]==target && mid==0)
                return mid;
            if(a[mid]==target && a[mid-1]!=target)
                return mid;
            if(target<=a[mid])
                r=mid-1;
            else 
                l=mid+1;
        }
        return -1;
    }
    
    int bs2(const vector<int>&a,int l,int r,int target)
    {
        int n = a.size();
        while(l<=r)
        {
            int mid = l+(r-l)/2;
            if(a[mid]==target && (mid==n-1 || a[mid+1]!=target))
                return mid;
            if(target>=a[mid])
                l=mid+1;
            else 
                r=mid-1;
        }
        return -1;
    }
    
    vector<int> searchRange(vector<int>& nums, int target) {
         int n = nums.size();
        int a = bs1(nums,0,n-1,target),b=bs2(nums,0,n-1,target);
        return {a,b};
    }
};
